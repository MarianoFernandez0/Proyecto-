import numpy as np
import matplotlib.pyplot as plt
import math
import cv2
from scipy.spatial.distance import cdist

image = np.zeros((100, 100))


pos = np.array([[5,5],[10,12],[22,25],[33,40],[40,15],[50,3],[65,13],[72,23]])
posX = [38.65984654731458,37.17821782178218,32.7843137254902,32.241379310344826,31.94638069705093,27.0,26.40921409214092,26.54395604395605,22.159340659340657,20.13440860215054,21.400537634408604,17.474474474474466,14.38208955223881,15.786833855799367,12.985507246376807,8.901898734177216,9.413173652694613,8.319018404907975,6.083682008368201,6.000000000000001,5.436426116838488,4.075949367088608,3.691275167785235,3.664772727272727,1.333333333333333,-0.6541570971664625,-1.8153120941722105]
posY = [359.23273657289,356.87871287128706,359.97794117647067,356.28571428571416,352.9356568364612,355.49999999999994,353.4552845528455,348.49450549450546,350.64835164835165,349.92473118279565,344.61290322580635,345.7807807807808,346.2447761194029,341.1128526645768,340.97971014492754,342.1297468354431,337.12574850299393,336.0184049079756,338.15899581589963,334.01067615658366,330.39862542955325,334.1202531645569,332.39597315436237,328.88068181818176,330.6666666666667,327.6962916688727,326.49184323777394]

posX = [204.22900763358783 ,198.41897233201578 ,200.25506072874498 ,197.3359375 ,194.51394422310761 ,196.58677685950423 ,190.85657370517927 ,193.06799999999998 ,189.41176470588238 ,188.0635593220339 ,188.9375 ,183.19685039370077 ,186.38524590163942 ,181.41101694915258 ,181.03535353535352 ,180.84771573604058 ,175.83980582524268 ,178.90355329949236 ,173.5208333333334 ,174.1587301587301 ,173.0 ,168.99999999999997 ,171.5377777777778 ,165.8631578947368 ,167.07114624505928 ,165.0 ,161.5344129554656 ,163.53679653679657 ,157.7210300429184 ,160.1976744186047 ,156.68141592920358 ,155.0 ,156.0 ,150.2074688796681 ,153.0 ,148.7020408163265 ,147.68141592920358 ,148.212 ,143.3234042553192 ,145.56465517241378 ,140.5 ,140.93133047210299 ,139.9693877551021 ,135.32 ,138.4979079497908 ,132.8391304347826 ,134.0 ,132.06465517241378 ,128.1889400921659 ,130.6099585062241 ,124.7965367965368 ,126.55309734513268 ,123.9082969432314 ,113.99137931034481 ,114.51683168316829 ,111.81381957773507 ,115.56701030927829 ,112.89393939393939 ,114.2093596059113 ,116.3730964467005 ,112.9212765957447 ,116.52380952380948 ,115.28415300546449 ,115.4411764705882 ,117.82986111111109 ,101.91153846153848 ,104.62352941176471 ,99.05098039215687 ,99.76255707762556 ,98.29460580912863 ,94.49999999999999 ,96.7328244274809 ,90.90588235294118 ,92.69527896995712 ,90.0 ,87.33457249070632 ,89.26399999999997 ,83.2411067193676 ,85.43726235741445 ,82.00374531835206 ,79.83141762452107 ,80.95384615384614 ,75.35897435897436 ,77.86852589641434 ,73.3457249070632 ,72.47430830039526 ,72.6023166023166 ,67.41153846153847 ,70.49596774193549 ,65.0 ,65.38257575757576 ,64.5019305019305 ,59.83076923076923 ,62.41312741312742 ,57.0 ,58.000000000000014 ,56.00401606425702 ,52.53191489361702 ,55.23461538461538 ,48.608856088560884 ,51.06204379562044 ,48.000000000000014 ,45.73949579831933 ,46.98340248962656 ,41.22489959839358 ,43.56537102473497 ,39.26492537313433 ,38.144444444444446 ,38.60956175298805 ,33.16867469879518 ,35.968421052631584 ,31.0 ,30.93927125506073 ,30.23552123552123 ,25.545801526717558 ,28.243542435424356 ,22.807547169811315]
posY = [154.08015267175568, 152.7628458498024, 157.0323886639676, 158.19921875, 159.0756972111554, 163.88842975206606, 161.77689243027888, 167.196, 166.8235294117647, 168.67372881355928, 172.6727941176471, 171.25196850393698, 176.2418032786885, 175.8516949152542, 178.56565656565658, 181.54822335025378, 180.39805825242718, 186.18781725888329, 184.765625, 188.27513227513228, 190.34134615384622, 190.0, 195.4044444444445, 193.5473684210526, 198.22924901185772, 198.99999999999997, 199.48178137651817, 204.74458874458878, 202.4334763948498, 207.37209302325576, 207.8495575221239, 208.99999999999997, 213.5, 211.71369294605805, 216.99999999999997, 216.4, 218.84955752212392, 222.18000000000004, 220.63829787234036, 226.7198275862069, 225.5, 228.4420600858369, 231.27551020408157, 230.31999999999996, 235.53974895397488, 234.07391304347829, 238.0, 239.49999999999997, 240.0276497695853, 245.16182572614105, 243.2337662337662, 248.36725663716823, 248.2794759825327, 252.6400862068965, 257.51287128712875, 257.54894433781186, 258.92525773195877, 261.7489177489178, 262.2167487684729, 263.8502538071066, 265.67659574468087, 267.67748917748924, 268.11475409836066, 271.681660899654, 271.609375, 269.9769230769231, 275.8549019607844, 274.043137254902, 277.84931506849307, 279.6348547717842, 279.5, 285.1603053435115, 282.91764705882355, 287.4077253218884, 288.58245614035087, 288.9368029739777, 293.73199999999997, 291.8300395256917, 296.70722433460077, 296.5917602996255, 298.29501915708806, 302.33461538461535, 300.6196581196582, 306.23107569721117, 305.2156133828996, 307.79051383399207, 311.27027027027026, 309.6923076923077, 315.0725806451613, 313.99999999999994, 317.12121212121207, 319.3590733590734, 318.8307692307693, 324.14285714285717, 322.5, 327.0, 328.140562248996, 328.3723404255319, 333.0230769230769, 331.4464944649446, 336.1350364963503, 336.49999999999994, 337.29831932773106, 342.3692946058091, 340.0441767068273, 345.55477031802116, 345.09328358208944, 347.0074074074074, 350.808764940239, 349.2449799196787, 354.5859649122807, 353.5, 356.2672064777328, 359.21621621621614, 358.21374045801525, 363.5608856088561, 361.8075471698113]

def avgPath(X, Y):
    NumberNewPoints = 5
    xPath = []
    yPath = []

    for i in range(len(X) - 1):
        xvals = np.linspace(X[i], X[i + 1], NumberNewPoints + 2)  # crear 5 puntos en el medio (7 en total)
        yvals = np.linspace(Y[i], Y[i + 1], NumberNewPoints + 2)

        for j in range(len(xvals)):
            # obtengo caminos con muchos puntos intermedios (5 entre cada dos puntos originales)
            xPath.append(xvals[j])
            yPath.append(yvals[j])

    windowSize = NumberNewPoints * 4
    xPathSmooth = [np.mean(xPath[i:i + windowSize]) for i in range(0, len(xPath) - windowSize)]
    yPathSmooth = [np.mean(yPath[i:i + windowSize]) for i in range(0, len(yPath) - windowSize)]

    xvals1 = np.linspace(X[0], xPathSmooth[0], windowSize)  # se completa la parte del smoothpath que
    yvals1 = np.linspace(Y[0], yPathSmooth[0], windowSize)  # falta entre el primer valor y el primero
    xvalsEnd = np.linspace(xPathSmooth[-1], X[-1], windowSize)  # del array smooth
    yvalsEnd = np.linspace(yPathSmooth[-1], Y[-1], windowSize)
    for i in range(len(xvals1) - 1):
        xPathSmooth = [xvals1[-i - 2]] + xPathSmooth + [xvalsEnd[i + 1]]
        yPathSmooth = [yvals1[-i - 2]] + yPathSmooth + [yvalsEnd[i + 1]]

    return xPathSmooth, yPathSmooth


def VAP(X, Y, avgPathX, avgPathY, T):
    vel = []
    minIndexOld = 0
    xyavgPath = [(avgPathX, avgPathY) for avgPathX, avgPathY in zip(avgPathX, avgPathY)]
    for j in range(1, len(X)):
        # minDist = float('Inf')
        dists = cdist(np.array([[X[j], Y[j]]]), np.array(xyavgPath))
        minIndex = np.argmin(dists)
        dist = 0
        if minIndex >= minIndexOld:
            for i in range(minIndexOld, minIndex):
                dist = dist + math.sqrt((avgPathX[i + 1] - avgPathX[i]) ** 2 + (avgPathY[i + 1] - avgPathY[i]) ** 2)
        else:
            for i in range(minIndex, minIndexOld):
                dist = dist - math.sqrt((avgPathX[i + 1] - avgPathX[i]) ** 2 + (avgPathY[i + 1] - avgPathY[i]) ** 2)
        minIndexOld = minIndex
        time = T[j] - T[j - 1]
        vel.append(dist / time)
    vap_mean = np.mean(vel)
    vap_std = np.std(vel)
    return vap_mean, vap_std



avgX, avgY = avgPath(posX,posY)

plt.plot(posX, posY, marker='o')
for i in range(len(posX)):
    plt.text(posX[i], posY[i], i)
plt.plot(avgX,avgY, marker='*')
plt.show()
