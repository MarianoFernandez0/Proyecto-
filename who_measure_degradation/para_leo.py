import numpy as np
import matplotlib.pyplot as plt
import math
import cv2

image = np.zeros((100, 100))


pos = np.array([[5,5],[10,12],[22,25],[33,40],[40,15],[50,3],[65,13],[72,23]])
posX = [38.65984654731458,37.17821782178218,32.7843137254902,32.241379310344826,31.94638069705093,27.0,26.40921409214092,26.54395604395605,22.159340659340657,20.13440860215054,21.400537634408604,17.474474474474466,14.38208955223881,15.786833855799367,12.985507246376807,8.901898734177216,9.413173652694613,8.319018404907975,6.083682008368201,6.000000000000001,5.436426116838488,4.075949367088608,3.691275167785235,3.664772727272727,1.333333333333333,-0.6541570971664625,-1.8153120941722105]
posY = [359.23273657289,356.87871287128706,359.97794117647067,356.28571428571416,352.9356568364612,355.49999999999994,353.4552845528455,348.49450549450546,350.64835164835165,349.92473118279565,344.61290322580635,345.7807807807808,346.2447761194029,341.1128526645768,340.97971014492754,342.1297468354431,337.12574850299393,336.0184049079756,338.15899581589963,334.01067615658366,330.39862542955325,334.1202531645569,332.39597315436237,328.88068181818176,330.6666666666667,327.6962916688727,326.49184323777394]

posX = [502.687306501548,497.8620689655172,500.8430769230769,496.8986928104576,493.80064308681676,496.3856209150328,491.11526479750796,489.9483870967741,491.033950617284,485.69381107491853,485.50359712230215,484.76736111111114,479.6173285198557,480.8777777777778,478.66546762589934,474.31768953068604,476.278911564626,472.5,469.55704697986573,471.07911392405066,466.15,464.98730158730166,466.0,460.2427184466021,460.88588588588584,460.19631901840495,454.8192771084337,456.6,454.31831831831835,450.0996884735203,452.1755952380952,448.1589595375722,478.0,475.94252873563215,472.0,472.5,468.5625,466.1666666666666,466.5344827586208,461.73684210526324,461.7118644067796,459.8490566037735,455.66071428571433,456.03030303030295,452.7272727272728,450.0232558139534,450.45454545454544,445.79629629629636,431.8285024154589,443.7678571428572,438.6470588235293,439.5961538461538,436.4680851063829,433.139240506329,434.00000000000017,429.157894736842,427.84615384615387,427.3086419753086,422.61627906976736,423.0694444444445,420.08333333333326,416.7037037037037,417.038961038961,413.15254237288144,410.6575342465754,410.5,405.64705882352933,405.6415094339623,403.5,399.8072289156628,400.25714285714287,396.73913043478274,394.17757009345786,394.3398058252428,389.14864864864876,389.2,387.29333333333335,383.0,383.84375,380.25274725274727,378.42410382340967,378.0173913043478,374.83312224294036,372.8510680242105,371.62666666666667,369.1240239398832,368.15447154471536,365.5412257277608,363.6331826789418,364.0,358.47794117647067,344.98611111111114,352.0331940354438,340.8543689320388,343.6850634163875,340.7832017162922]
posY = [33.972136222910216,33.55485893416928,38.92307692307692,39.31372549019608,39.742765273311896,44.859477124182995,43.69781931464173,45.803225806451614,50.29012345679011,48.12052117263843,51.9136690647482,54.65277777777778,52.574007220216615,57.88888888888889,58.884892086330936,57.898916967509024,63.4591836734694,63.00000000000002,63.583892617449685,68.96835443037975,67.21875000000001,69.53015873015873,74.0,71.89320388349516,75.71171171171173,78.4969325153374,76.92771084337348,81.88,82.89789789789789,81.99376947040496,87.9970238095238,87.3208092485549,71.21276595744679,69.47126436781608,72.0,66.00000000000001,67.3375,66.97619047619048,61.6551724137931,65.34210526315789,61.59322033898306,58.981132075471706,62.0,55.83333333333334,56.95454545454545,57.34883720930232,52.05454545454546,54.944444444444414,53.886473429951714,48.80357142857143,52.09411764705882,46.5,46.244680851063826,47.443037974683534,41.5,44.3684210526316,42.03846153846154,38.12345679012346,42.04651162790697,36.84722222222221,36.11666666666667,37.99999999999999,31.779220779220786,34.66101694915254,33.06849315068492,29.0,32.68235294117647,27.877358490566035,26.5,29.0,23.25714285714286,24.96521739130435,23.934579439252328,19.33009708737864,21.97297297297297,18.544444444444448,16.026666666666667,19.0,13.0,14.032967032967026,12.562077277537773,7.843478260869565,8.934082275206887,7.514514826274878,4.7799999999999985,4.262263013530763,3.75609756097561,1.62147437939284,0.1869337214078061,0.7333333333333334,3.2058823529411766,3.3819444444444446,-1.2933546313630142,4.257281553398056,-0.6277928317630669,-1.2046671946988172]
def avgPath(X, Y):
    NumberNewPoints = 5
    xPath = []
    yPath = []

    for i in range(len(X) - 1):
        xvals = np.linspace(X[i], X[i + 1], NumberNewPoints + 2)  # crear 5 puntos en el medio (7 en total)
        yvals = np.linspace(Y[i], Y[i + 1], NumberNewPoints + 2)

        for j in range(len(xvals)):
            # obtengo caminos con muchos puntos intermedios (5 entre cada dos puntos originales)
            xPath.append(xvals[j])
            yPath.append(yvals[j])

    windowSize = NumberNewPoints * 4
    xPathSmooth = [np.mean(xPath[i:i + windowSize]) for i in range(0, len(xPath) - windowSize)]
    yPathSmooth = [np.mean(yPath[i:i + windowSize]) for i in range(0, len(yPath) - windowSize)]

    xvals1 = np.linspace(X[0], xPathSmooth[0], windowSize)  # se completa la parte del smoothpath que
    yvals1 = np.linspace(Y[0], yPathSmooth[0], windowSize)  # falta entre el primer valor y el primero
    xvalsEnd = np.linspace(xPathSmooth[-1], X[-1], windowSize)  # del array smooth
    yvalsEnd = np.linspace(yPathSmooth[-1], Y[-1], windowSize)
    for i in range(len(xvals1) - 1):
        xPathSmooth = [xvals1[-i - 2]] + xPathSmooth + [xvalsEnd[i + 1]]
        yPathSmooth = [yvals1[-i - 2]] + yPathSmooth + [yvalsEnd[i + 1]]

    return xPathSmooth, yPathSmooth


def avgPathorg(X, Y):
    NumberNewPoints = 10
    xPath = []
    yPath = []

    for i in range(len(X) - 1):
        xvals = np.linspace(X[i], X[i + 1], NumberNewPoints + 2)  # crear 5 puntos en el medio (7 en total)
        yvals = np.linspace(Y[i], Y[i + 1], NumberNewPoints + 2)
        if i != 0:
            xvals = xvals[1:-1]  # saco el primer y ultimo lugar
            yvals = yvals[1:-1]
        for j in range(len(xvals)):
            # obtengo caminos con muchos puntos intermedios (5 entre cada dos puntos originales)
            xPath.append(xvals[j])
            yPath.append(yvals[j])

    windowSize = NumberNewPoints * 5
    xPathSmooth = []  # se promedia con una ventana - al final se obtiene un camino con #windowSize puntos menos
    yPathSmooth = []  # la ventana movil se hace desde 0+windowsize/2 hasta fin-windowsize/2
    for i in range(math.trunc(windowSize / 2), int(len(xPath) - math.ceil(windowSize / 2))):
        xPathSmooth.append(np.mean(xPath[int(i - math.trunc(windowSize / 2)):int(i + math.ceil(windowSize / 2))]))
        yPathSmooth.append(np.mean(yPath[int(i - math.trunc(windowSize / 2)):int(i + math.ceil(windowSize / 2))]))

        # uno el primer y ultimo punto con el avg path asi me queda una avg path completo

    xvals1 = np.linspace(X[0], xPathSmooth[0], math.ceil(windowSize / 2) + 2)  # se completa la parte del smoothpath que
    yvals1 = np.linspace(Y[0], yPathSmooth[0],
                         math.ceil(windowSize / 2) + 2)  # falta entre el primer valor y el primero
    xvalsEnd = np.linspace(xPathSmooth[-1], X[-1], math.ceil(windowSize / 2) + 2)  # del array smooth
    yvalsEnd = np.linspace(yPathSmooth[-1], Y[-1], math.ceil(windowSize / 2) + 2)
    for i in range(len(xvals1) - 1):
        xPathSmooth = [xvals1[-i - 2]] + xPathSmooth + [xvalsEnd[i + 1]]
        yPathSmooth = [yvals1[-i - 2]] + yPathSmooth + [yvalsEnd[i + 1]]

    return xPathSmooth, yPathSmooth



avgX, avgY = avgPath(posX,posY)

plt.plot(posX, posY, marker='o')
for i in range(len(posX)):
    plt.text(posX[i], posY[i], i)
plt.plot(avgX,avgY, marker='*')
plt.show()
